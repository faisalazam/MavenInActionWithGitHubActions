<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.${organization.name.lowercased}.${scm.repo.name.lowercased}</groupId>
    <artifactId>${scm.repo.name.lowercased}</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>User CRUD with JWT Security</name>
    <description>User CRUD with JWT Security</description>
    <url>${scm.repo.link}</url>

    <organization>
        <name>${organization.name}</name>
        <url>${scm.user.link}</url>
    </organization>

    <scm>
        <url>${scm.repo.link}</url>
        <connection>scm:git:${scm.repo.link}.git</connection>
        <developerConnection>scm:git:${scm.repo.link}.git</developerConnection>
    </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>${scm.repo.link}/issues/</url>
    </issueManagement>

    <ciManagement>
        <system>github-actions</system>
        <url>${scm.repo.link}/actions</url>
    </ciManagement>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>${owner.name}</name>
            <organization>${project.organization.name}</organization>
            <organizationUrl>${scm.user.link}</organizationUrl>
            <roles>
                <role>developer</role>
            </roles>
            <timezone>GMT</timezone>
        </developer>
    </developers>

    <properties>
        <badges.skip>false</badges.skip>
        <java.version>20</java.version>
        <maven.compiler.release>20</maven.compiler.release>

        <owner.name>Muhammad Faisal</owner.name>
        <organization.name>LucidTech</organization.name>
        <organization.name.lowercased>lucidtech</organization.name.lowercased>
        <owner.twitter.handle>mfa1616</owner.twitter.handle>
        <scm.user.name>faisalazam</scm.user.name>
        <scm.repo.name>MavenInActionWithGitHubActions</scm.repo.name>
        <scm.repo.name.lowercased>maveninactionwithgithubactions</scm.repo.name.lowercased>
        <scm.user.link>https://github.com/${scm.user.name}</scm.user.link>
        <scm.repo.link>${scm.user.link}/${scm.repo.name}</scm.repo.link>
        <scm.package.url>https://maven.pkg.github.com/${scm.user.name}/${scm.repo.name}</scm.package.url>

        <target.directory>${project.build.directory}</target.directory>
        <target.markdown.directory>src/site/markdown</target.markdown.directory>
        <target.site.directory>${project.reporting.outputDirectory}</target.site.directory>
        <tests.results.directory>${target.directory}/test-results</tests.results.directory>

        <jacoco.execs.directory>${tests.results.directory}/jacoco-execs</jacoco.execs.directory>
        <jacoco.ut.exec>${jacoco.execs.directory}/ut.exec</jacoco.ut.exec>
        <jacoco.it.exec>${jacoco.execs.directory}/it.exec</jacoco.it.exec>
        <jacoco.merged.exec>${jacoco.execs.directory}/merged.exec</jacoco.merged.exec>
        <jacoco.ut.reporting.directory>${target.site.directory}/jacoco</jacoco.ut.reporting.directory>
        <jacoco.it.reporting.directory>${target.site.directory}/jacoco-it</jacoco.it.reporting.directory>
        <jacoco.merged.reporting.directory>${target.site.directory}/jacoco-merged</jacoco.merged.reporting.directory>

        <copy.right.info><![CDATA[CopyrightÂ© 2023 <a href="${scm.user.link}">${organization.name}</a>. All Rights Reserved.]]></copy.right.info>

        <skip.unit.tests>false</skip.unit.tests>
        <skip.integration.tests>false</skip.integration.tests>
        <ignore.test.failures>false</ignore.test.failures>
        <unit.tests.results.directory>${tests.results.directory}/unit-tests</unit.tests.results.directory>
        <integration.tests.results.directory>${tests.results.directory}/integration-tests</integration.tests.results.directory>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- TEST -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub Packages</name>
            <url>${scm.package.url}</url>
        </repository>
    </distributionManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--    Specifying the maven compiler as otherwise it might use the older version   -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
            </plugin>
            <!--     Start -> This plugin is included just to define the `skip.unit.tests` variable, so that we can skip unit tests whenever we want       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <skipTests>${skip.unit.tests}</skipTests>
                    <argLine>${surefire.jacoco.exec.file.name.arg}</argLine>
                    <testFailureIgnore>${ignore.test.failures}</testFailureIgnore>
                    <reportsDirectory>${unit.tests.results.directory}</reportsDirectory>
                </configuration>
            </plugin>
            <!--     End -> This plugin is included just to define the `skip.unit.tests` variable, so that we can skip unit tests whenever we want       -->
            <!--     Start -> This plugin will be used to run Integration tests separately from unit tests      -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <argLine>${failsafe.jacoco.exec.file.name.arg}</argLine>
                    <skipTests>${skip.integration.tests}</skipTests>
                    <testFailureIgnore>${ignore.test.failures}</testFailureIgnore>
                    <reportsDirectory>${integration.tests.results.directory}</reportsDirectory>
                </configuration>
            </plugin>
            <!--     End -> This plugin will be used to run Integration tests separately from unit tests      -->
            <!--     Start -> Plugin to generate java docs       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <outputDirectory>${target.site.directory}/javadoc</outputDirectory>
                    <reportOutputDirectory>${target.site.directory}/javadoc</reportOutputDirectory>
                </configuration>
            </plugin>
            <!--     End -> Plugin to generate java docs       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Copy the readme file to the site markdown directory so that a page is generated from it. -->
                        <id>copy-readme</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
                            <outputDirectory>${target.markdown.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}</directory>
                                    <includes>
                                        <include>README.md</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--     Start -> Plugin for mvn site       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>4.0.0-M8</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.4.5</version>
            </plugin>
            <!--     End -> Plugin for mvn site       -->
            <!--     Start -> Plugin for mvn jacoco:report -> to generate the code coverage report       -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.10</version>
                <executions>
                    <execution>
                        <id>before-unit-test-execution</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.ut.exec}</destFile>
                            <propertyName>surefire.jacoco.exec.file.name.arg</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>after-unit-test-execution</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.ut.exec}</dataFile>
                            <outputDirectory>${jacoco.ut.reporting.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>before-integration-test-execution</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.it.exec}</destFile>
                            <propertyName>failsafe.jacoco.exec.file.name.arg</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>after-integration-test-execution</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.it.exec}</dataFile>
                            <outputDirectory>${jacoco.it.reporting.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>merge-unit-and-integration</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <directory>${jacoco.execs.directory}/</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <destFile>${jacoco.merged.exec}</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-merged-report</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.merged.exec}</dataFile>
                            <outputDirectory>${jacoco.merged.reporting.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <!--   Start -> To set the minimum code coverage threshold  -->
                    <!--   The jacoco:check goal is bound to verify,
                    so we can run the Maven command mvn clean verify to check whether the rules are respected or not.-->
                    <execution>
                        <id>jacoco-check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>CLASS</element>
                                    <excludes>
                                        <exclude>*Test</exclude>
                                        <exclude>*IT</exclude>
                                    </excludes>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>80%</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                            <dataFile>${jacoco.merged.exec}</dataFile>
                        </configuration>
                    </execution>
                    <!--   End -> To set the minimum code coverage threshold  -->
                </executions>
            </plugin>
            <!--     End -> Plugin for mvn jacoco:report -> to generate the code coverage report       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.21.0</version>
                <configuration>
                    <outputDirectory>target/reports/pmd</outputDirectory>
                    <targetDirectory>target/reports/pmd/xml</targetDirectory>
                </configuration>
                <executions>
                    <execution>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>pmd</goal>
                            <goal>cpd</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>checkstyle</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.bordertech.buildtools</groupId>
                <artifactId>badger</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>badges</goal>
                        </goals>
                        <configuration>
                            <skip>${badges.skip}</skip>
                            <outputDir>${target.site.directory}/badges</outputDir>
                            <inputFiles>
                                <inputFile>target/checkstyle-result.xml</inputFile>
                            </inputFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.21.0</version>
                <configuration>
                    <outputDirectory>target/reports/pmd</outputDirectory>
                    <targetDirectory>target/reports/pmd/xml</targetDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.3.0</version>
            </plugin>
            <!--    Start -> This plugin is used to create the report for Unit tests and embed it in the site generated by `mvn site`    -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.1.2</version>
                <reportSets>
                    <reportSet>
                        <id>unit-tests</id>
                        <configuration>
                            <linkXRef>true</linkXRef>
                            <reportsDirectories>
                                <reportsDirectories>${unit.tests.results.directory}</reportsDirectories>
                            </reportsDirectories>
                        </configuration>
                        <reports>
                            <report>report-only</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <id>integration-tests</id>
                        <configuration>
                            <linkXRef>true</linkXRef>
                            <reportsDirectories>
                                <reportsDirectories>${integration.tests.results.directory}</reportsDirectories>
                            </reportsDirectories>
                        </configuration>
                        <reports>
                            <report>failsafe-report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <!--    End -> This plugin is used to create the report for Unit tests and embed it in the site generated by `mvn site`    -->
            <!--    Start -> This plugin is used to create the report for Code coverage and embed it in the site generated by `mvn site`    -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.10</version>
                <reportSets>
                    <reportSet>
                        <configuration>
                            <dataFile>${jacoco.ut.exec}</dataFile>
                        </configuration>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <configuration>
                            <dataFile>${jacoco.it.exec}</dataFile>
                        </configuration>
                        <reports>
                            <report>report-integration</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <!--    End -> This plugin is used to create the report for Code coverage and embed it in the site generated by `mvn site`    -->
            <!--    Start -> Plugin to fix the `Unable to locate Test Source XRef to link to - DISABLED` issue coming up while generating the surefire report       -->
            <!--    It'll actually create links to the source classes in the site generated by `mvn site`       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>3.3.0</version>
            </plugin>
            <!--    End -> Plugin to fix the `Unable to locate Test Source XRef to link to - DISABLED` issue coming up while generating the surefire report       -->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-javadoc-plugin</artifactId>-->
<!--                <version>3.5.0</version>-->
<!--                <configuration>-->
<!--                    <source>20</source>-->
<!--                    <show>private</show>-->
<!--                    <linksource>true</linksource>-->
<!--                    <failOnError>false</failOnError>-->
<!--                    <bottom>${copy.right.info}</bottom>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.codehaus.mojo</groupId>-->
<!--                <artifactId>versions-maven-plugin</artifactId>-->
<!--                <version>2.7</version>-->
<!--                <reportSets>-->
<!--                    <reportSet>-->
<!--                        <reports>-->
<!--                            <report>dependency-updates-report</report>-->
<!--                            <report>plugin-updates-report</report>-->
<!--                            <report>property-updates-report</report>-->
<!--                        </reports>-->
<!--                    </reportSet>-->
<!--                </reportSets>-->
<!--            </plugin>-->
<!--            &lt;!&ndash; Generates a list of changes from the SCM. You will probably want-->
<!--                to restrict this somehow for real projects (e.g. by date).-->
<!--                http://maven.apache.org/plugins/maven-changelog-plugin/usage.html &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-changelog-plugin</artifactId>-->
<!--                <version>2.3</version>-->
<!--            </plugin>-->

<!--            <plugin>-->
<!--                <groupId>org.codehaus.mojo</groupId>-->
<!--                <artifactId>taglist-maven-plugin</artifactId>-->
<!--                <version>3.0.0</version>-->
<!--                <configuration>-->
<!--                    <tagListOptions>-->
<!--                        <tagClasses>-->
<!--                            <tagClass>-->
<!--                                <displayName>Todo Work</displayName>-->
<!--                                <tags>-->
<!--                                    <tag>-->
<!--                                        <matchString>todo</matchString>-->
<!--                                        <matchType>ignoreCase</matchType>-->
<!--                                    </tag>-->
<!--                                    <tag>-->
<!--                                        <matchString>FIXME</matchString>-->
<!--                                        <matchType>exact</matchType>-->
<!--                                    </tag>-->
<!--                                </tags>-->
<!--                            </tagClass>-->
<!--                        </tagClasses>-->
<!--                    </tagListOptions>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.owasp</groupId>-->
<!--                <artifactId>dependency-check-maven</artifactId>-->
<!--                <version>8.3.1</version>-->
<!--                <reportSets>-->
<!--                    <reportSet>-->
<!--                        <reports>-->
<!--                            <report>aggregate</report>-->
<!--                        </reports>-->
<!--                    </reportSet>-->
<!--                </reportSets>-->
<!--            </plugin>-->
        </plugins>
    </reporting>

    <profiles>
        <!-- profile for Unit test only -->
        <profile>
            <id>ut</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!--profile for Integration test only -->
        <profile>
            <id>it</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
        </profile>
        <!-- Both Unit and Integration tests combined -->
        <profile>
            <id>uit</id>
            <properties>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
        </profile>
        <!-- No test execution required at all -->
        <profile>
            <id>nt</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
            </properties>
        </profile>
    </profiles>

</project>
